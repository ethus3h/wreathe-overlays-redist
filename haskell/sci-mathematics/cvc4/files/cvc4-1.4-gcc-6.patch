diff --git a/src/context/cdchunk_list.h b/src/context/cdchunk_list.h
index 16aa321..881dae8 100644
--- a/src/context/cdchunk_list.h
+++ b/src/context/cdchunk_list.h
@@ -323,3 +323,3 @@ public:
    */
-  ~CDChunkList() throw(AssertionException) {
+  ~CDChunkList() {
     this->destroy();
diff --git a/src/context/cdhashmap.h b/src/context/cdhashmap.h
index 02f3d85..c168d62 100644
--- a/src/context/cdhashmap.h
+++ b/src/context/cdhashmap.h
@@ -231,3 +231,3 @@ public:
 
-  ~CDOhash_map() throw(AssertionException) {
+  ~CDOhash_map() {
     destroy();
@@ -322,3 +322,3 @@ public:
 
-  ~CDHashMap() throw(AssertionException) {
+  ~CDHashMap() {
     Debug("gc") << "cdhashmap" << this
@@ -348,3 +348,3 @@ public:
 
-  void clear() throw(AssertionException) {
+  void clear() {
     Debug("gc") << "clearing cdhashmap" << this << ", emptying trash" << std::endl;
diff --git a/src/context/cdinsert_hashmap.h b/src/context/cdinsert_hashmap.h
index 1c8f941..7416821 100644
--- a/src/context/cdinsert_hashmap.h
+++ b/src/context/cdinsert_hashmap.h
@@ -272,3 +272,3 @@ public:
    */
-  ~CDInsertHashMap() throw(AssertionException) {
+  ~CDInsertHashMap() {
     this->destroy();
diff --git a/src/context/cdlist.h b/src/context/cdlist.h
index 7c673a4..c082860 100644
--- a/src/context/cdlist.h
+++ b/src/context/cdlist.h
@@ -260,3 +260,3 @@ public:
    */
-  ~CDList() throw(AssertionException) {
+  ~CDList() {
     this->destroy();
diff --git a/src/context/cdo.h b/src/context/cdo.h
index 5fa0a4d..ce942c1 100644
--- a/src/context/cdo.h
+++ b/src/context/cdo.h
@@ -138,3 +138,3 @@ public:
    */
-  ~CDO() throw(AssertionException) { destroy(); }
+  ~CDO() { destroy(); }
 
diff --git a/src/context/cdtrail_hashmap.h b/src/context/cdtrail_hashmap.h
index f4220ef..0f080e1 100644
--- a/src/context/cdtrail_hashmap.h
+++ b/src/context/cdtrail_hashmap.h
@@ -455,3 +455,3 @@ public:
    */
-  ~CDTrailHashMap() throw(AssertionException) {
+  ~CDTrailHashMap() {
     this->destroy();
diff --git a/src/context/context.cpp b/src/context/context.cpp
index c427e89..79ec0de 100644
--- a/src/context/context.cpp
+++ b/src/context/context.cpp
@@ -36,3 +36,3 @@ Context::Context() : d_pCNOpre(NULL), d_pCNOpost(NULL) {
 
-Context::~Context() throw(AssertionException) {
+Context::~Context() {
   // Delete all Scopes
@@ -137,3 +137,3 @@ void Context::addNotifyObjPost(ContextNotifyObj* pCNO) {
 
-void ContextObj::update() throw(AssertionException) {
+void ContextObj::update() {
   Debug("context") << "before update(" << this << "):" << std::endl
@@ -196,3 +196,3 @@ void ContextObj::update() throw(AssertionException) {
 
-ContextObj* ContextObj::restoreAndContinue() throw(AssertionException) {
+ContextObj* ContextObj::restoreAndContinue() {
   // Variable to hold next object in list
@@ -237,3 +237,3 @@ ContextObj* ContextObj::restoreAndContinue() throw(AssertionException) {
 
-void ContextObj::destroy() throw(AssertionException) {
+void ContextObj::destroy() {
   /* Context can be big and complicated, so we only want to process this output
@@ -307,3 +307,3 @@ ContextNotifyObj::ContextNotifyObj(Context* pContext, bool preNotify) {
 
-ContextNotifyObj::~ContextNotifyObj() throw(AssertionException) {
+ContextNotifyObj::~ContextNotifyObj() {
   if(d_pCNOnext != NULL) {
@@ -318,3 +318,3 @@ ContextNotifyObj::~ContextNotifyObj() throw(AssertionException) {
 std::ostream& operator<<(std::ostream& out,
-                         const Context& context) throw(AssertionException) {
+                         const Context& context) {
   static const std::string separator(79, '-');
@@ -337,3 +337,3 @@ std::ostream& operator<<(std::ostream& out,
 std::ostream& operator<<(std::ostream& out,
-                         const Scope& scope) throw(AssertionException) {
+                         const Scope& scope) {
   out << "Scope " << scope.d_level << " [" << &scope << "]:";
diff --git a/src/context/context.h b/src/context/context.h
index 02d82a6..73e483e 100644
--- a/src/context/context.h
+++ b/src/context/context.h
@@ -41,3 +41,3 @@ class ContextNotifyObj;
 std::ostream&
-operator<<(std::ostream&, const Context&) throw(AssertionException);
+operator<<(std::ostream&, const Context&);
 
@@ -45,3 +45,3 @@ operator<<(std::ostream&, const Context&) throw(AssertionException);
 std::ostream&
-operator<<(std::ostream&, const Scope&) throw(AssertionException);
+operator<<(std::ostream&, const Scope&);
 
@@ -93,3 +93,3 @@ class Context {
   friend std::ostream&
-  operator<<(std::ostream&, const Context&) throw(AssertionException);
+  operator<<(std::ostream&, const Context&);
 
@@ -152,3 +152,3 @@ public:
    */
-  ~Context() throw(AssertionException);
+  ~Context();
 
@@ -258,3 +258,3 @@ class Scope {
   friend std::ostream&
-  operator<<(std::ostream&, const Scope&) throw(AssertionException);
+  operator<<(std::ostream&, const Scope&);
 
@@ -277,3 +277,3 @@ public:
    */
-  ~Scope() throw(AssertionException);
+  ~Scope();
 
@@ -304,3 +304,3 @@ public:
    */
-  void addToChain(ContextObj* pContextObj) throw(AssertionException);
+  void addToChain(ContextObj* pContextObj);
 
@@ -442,3 +442,3 @@ class ContextObj {
    */
-  void update() throw(AssertionException);
+  void update();
 
@@ -450,3 +450,3 @@ class ContextObj {
   friend std::ostream&
-  operator<<(std::ostream&, const Scope&) throw(AssertionException);
+  operator<<(std::ostream&, const Scope&);
 
@@ -469,3 +469,3 @@ class ContextObj {
    */
-  ContextObj* restoreAndContinue() throw(AssertionException);
+  ContextObj* restoreAndContinue();
 
@@ -489,3 +489,3 @@ protected:
    */
-  inline void makeCurrent() throw(AssertionException);
+  inline void makeCurrent();
 
@@ -498,3 +498,3 @@ protected:
    */
-  inline void makeSaveRestorePoint() throw(AssertionException);
+  inline void makeSaveRestorePoint();
 
@@ -507,3 +507,3 @@ protected:
    */
-  void destroy() throw(AssertionException);
+  void destroy();
 
@@ -711,3 +711,3 @@ public:
    */
-  virtual ~ContextNotifyObj() throw(AssertionException);
+  virtual ~ContextNotifyObj();
 
@@ -715,3 +715,3 @@ public:
 
-inline void ContextObj::makeCurrent() throw(AssertionException) {
+inline void ContextObj::makeCurrent() {
   if(!(d_pScope->isCurrent())) {
@@ -721,3 +721,3 @@ inline void ContextObj::makeCurrent() throw(AssertionException) {
 
-inline void ContextObj::makeSaveRestorePoint() throw(AssertionException) {
+inline void ContextObj::makeSaveRestorePoint() {
   update();
@@ -725,3 +725,3 @@ inline void ContextObj::makeSaveRestorePoint() throw(AssertionException) {
 
-inline Scope::~Scope() throw(AssertionException) {
+inline Scope::~Scope() {
   // Call restore() method on each ContextObj object in the list.
@@ -735,3 +735,3 @@ inline Scope::~Scope() throw(AssertionException) {
 inline void
-Scope::addToChain(ContextObj* pContextObj) throw(AssertionException) {
+Scope::addToChain(ContextObj* pContextObj) {
   if(d_pContextObjList != NULL) {
diff --git a/src/expr/node.h b/src/expr/node.h
index 35f94b9..b16cafb 100644
--- a/src/expr/node.h
+++ b/src/expr/node.h
@@ -228,3 +228,3 @@ class NodeTemplate {
 
-  inline void assertTNodeNotExpired() const throw(AssertionException) {
+  inline void assertTNodeNotExpired() const {
     if(!ref_count) {
@@ -306,3 +306,3 @@ public:
    */
-  ~NodeTemplate() throw(AssertionException);
+  ~NodeTemplate();
 
@@ -1087,3 +1087,3 @@ NodeTemplate<ref_count>::NodeTemplate(const Expr& e) {
 template <bool ref_count>
-NodeTemplate<ref_count>::~NodeTemplate() throw(AssertionException) {
+NodeTemplate<ref_count>::~NodeTemplate() {
   Assert(d_nv != NULL, "Expecting a non-NULL expression value!");
diff --git a/src/expr/type_node.h b/src/expr/type_node.h
index 289395a..12a0a70 100644
--- a/src/expr/type_node.h
+++ b/src/expr/type_node.h
@@ -118,3 +118,3 @@ public:
    */
-  ~TypeNode() throw(AssertionException);
+  ~TypeNode();
 
@@ -764,3 +764,3 @@ inline TypeNode::TypeNode(const TypeNode& typeNode) {
 
-inline TypeNode::~TypeNode() throw(AssertionException) {
+inline TypeNode::~TypeNode() {
   Assert(d_nv != NULL, "Expecting a non-NULL expression value!");
diff --git a/src/main/driver_unified.cpp b/src/main/driver_unified.cpp
index 1202c78..de67aec 100644
--- a/src/main/driver_unified.cpp
+++ b/src/main/driver_unified.cpp
@@ -101,3 +101,3 @@ void printStatsFilterZeros(std::ostream& out, const std::string& statsString) {
     double curFloat;
-    bool isFloat = (std::istringstream(statValue) >> curFloat);
+    bool isFloat = bool(std::istringstream(statValue) >> curFloat);
 
diff --git a/src/main/interactive_shell.cpp b/src/main/interactive_shell.cpp
index bdc9565..fe453d0 100644
--- a/src/main/interactive_shell.cpp
+++ b/src/main/interactive_shell.cpp
@@ -105,3 +105,3 @@ InteractiveShell::InteractiveShell(ExprManager& exprManager,
 #if HAVE_LIBREADLINE
-  if(d_in == cin) {
+  if(d_in.rdbuf() == cin.rdbuf()) {
     ::rl_readline_name = const_cast<char*>("CVC4");
diff --git a/src/prop/bvminisat/bvminisat.cpp b/src/prop/bvminisat/bvminisat.cpp
index 7322cd0..e7e01ca 100644
--- a/src/prop/bvminisat/bvminisat.cpp
+++ b/src/prop/bvminisat/bvminisat.cpp
@@ -37,3 +37,3 @@ BVMinisatSatSolver::BVMinisatSatSolver(context::Context* mainSatContext, const s
 
-BVMinisatSatSolver::~BVMinisatSatSolver() throw(AssertionException) {
+BVMinisatSatSolver::~BVMinisatSatSolver() {
   delete d_minisat;
diff --git a/src/prop/bvminisat/bvminisat.h b/src/prop/bvminisat/bvminisat.h
index f9d0fbd..5971af7 100644
--- a/src/prop/bvminisat/bvminisat.h
+++ b/src/prop/bvminisat/bvminisat.h
@@ -74,3 +74,3 @@ public:
   BVMinisatSatSolver(context::Context* mainSatContext, const std::string& name = "");
-  ~BVMinisatSatSolver() throw(AssertionException);
+  ~BVMinisatSatSolver();
 
diff --git a/src/theory/arith/type_enumerator.h b/src/theory/arith/type_enumerator.h
index f661e18..efae236 100644
--- a/src/theory/arith/type_enumerator.h
+++ b/src/theory/arith/type_enumerator.h
@@ -36,3 +36,3 @@ public:
 
-  RationalEnumerator(TypeNode type) throw(AssertionException) :
+  RationalEnumerator(TypeNode type) :
     TypeEnumeratorBase<RationalEnumerator>(type),
@@ -83,3 +83,3 @@ public:
 
-  IntegerEnumerator(TypeNode type) throw(AssertionException) :
+  IntegerEnumerator(TypeNode type) :
     TypeEnumeratorBase<IntegerEnumerator>(type),
@@ -117,3 +117,3 @@ public:
 
-  SubrangeEnumerator(TypeNode type) throw(AssertionException) :
+  SubrangeEnumerator(TypeNode type) :
     TypeEnumeratorBase<SubrangeEnumerator>(type),
diff --git a/src/theory/arrays/type_enumerator.h b/src/theory/arrays/type_enumerator.h
index 2c6fc56..b4f7f06 100644
--- a/src/theory/arrays/type_enumerator.h
+++ b/src/theory/arrays/type_enumerator.h
@@ -41,3 +41,3 @@ public:
 
-  ArrayEnumerator(TypeNode type) throw(AssertionException) :
+  ArrayEnumerator(TypeNode type) :
     TypeEnumeratorBase<ArrayEnumerator>(type),
diff --git a/src/theory/builtin/type_enumerator.h b/src/theory/builtin/type_enumerator.h
index c9585c4..c2d28a8 100644
--- a/src/theory/builtin/type_enumerator.h
+++ b/src/theory/builtin/type_enumerator.h
@@ -36,3 +36,3 @@ public:
 
-  UninterpretedSortEnumerator(TypeNode type) throw(AssertionException) :
+  UninterpretedSortEnumerator(TypeNode type) :
     TypeEnumeratorBase<UninterpretedSortEnumerator>(type),
diff --git a/src/theory/bv/bv_inequality_graph.h b/src/theory/bv/bv_inequality_graph.h
index 3c67f50..1e15f56 100644
--- a/src/theory/bv/bv_inequality_graph.h
+++ b/src/theory/bv/bv_inequality_graph.h
@@ -244,3 +244,3 @@ public:
   void getConflict(std::vector<TNode>& conflict);
-  virtual ~InequalityGraph() throw(AssertionException) {}
+  virtual ~InequalityGraph() {}
   /** 
diff --git a/src/theory/bv/type_enumerator.h b/src/theory/bv/type_enumerator.h
index 1d835dd..adc2d14 100644
--- a/src/theory/bv/type_enumerator.h
+++ b/src/theory/bv/type_enumerator.h
@@ -37,3 +37,3 @@ public:
 
-  BitVectorEnumerator(TypeNode type) throw(AssertionException) :
+  BitVectorEnumerator(TypeNode type) :
     TypeEnumeratorBase<BitVectorEnumerator>(type),
diff --git a/src/theory/datatypes/theory_datatypes_type_rules.h b/src/theory/datatypes/theory_datatypes_type_rules.h
index ddad913..39010cb 100644
--- a/src/theory/datatypes/theory_datatypes_type_rules.h
+++ b/src/theory/datatypes/theory_datatypes_type_rules.h
@@ -85,3 +85,3 @@ struct DatatypeConstructorTypeRule {
   inline static bool computeIsConst(NodeManager* nodeManager, TNode n)
-    throw(AssertionException) {
+    {
     Assert(n.getKind() == kind::APPLY_CONSTRUCTOR);
diff --git a/src/theory/output_channel.h b/src/theory/output_channel.h
index 40eba6f..7a67b22 100644
--- a/src/theory/output_channel.h
+++ b/src/theory/output_channel.h
@@ -99,3 +99,3 @@ public:
    */
-  virtual void conflict(TNode n) throw(AssertionException) = 0;
+  virtual void conflict(TNode n) = 0;
 
@@ -107,3 +107,3 @@ public:
    */
-  virtual bool propagate(TNode n) throw(AssertionException) = 0;
+  virtual bool propagate(TNode n) = 0;
 
@@ -200,3 +200,3 @@ public:
    */
-  virtual void setIncomplete() throw(AssertionException) = 0;
+  virtual void setIncomplete() = 0;
 
diff --git a/src/theory/sets/theory_sets_type_enumerator.h b/src/theory/sets/theory_sets_type_enumerator.h
index 5d14006..f9f4792 100644
--- a/src/theory/sets/theory_sets_type_enumerator.h
+++ b/src/theory/sets/theory_sets_type_enumerator.h
@@ -43,3 +43,3 @@ public:
 
-  SetEnumerator(TypeNode type) throw(AssertionException) :
+  SetEnumerator(TypeNode type) :
     TypeEnumeratorBase<SetEnumerator>(type),
diff --git a/src/theory/shared_terms_database.cpp b/src/theory/shared_terms_database.cpp
index 6e50cb8..1dd531a 100644
--- a/src/theory/shared_terms_database.cpp
+++ b/src/theory/shared_terms_database.cpp
@@ -38,3 +38,3 @@ SharedTermsDatabase::SharedTermsDatabase(TheoryEngine* theoryEngine, context::Co
 
-SharedTermsDatabase::~SharedTermsDatabase() throw(AssertionException)
+SharedTermsDatabase::~SharedTermsDatabase()
 {
diff --git a/src/theory/shared_terms_database.h b/src/theory/shared_terms_database.h
index e01a407..174acec 100644
--- a/src/theory/shared_terms_database.h
+++ b/src/theory/shared_terms_database.h
@@ -151,3 +151,3 @@ public:
   SharedTermsDatabase(TheoryEngine* theoryEngine, context::Context* context);
-  ~SharedTermsDatabase() throw(AssertionException);
+  ~SharedTermsDatabase();
 
diff --git a/src/theory/strings/type_enumerator.h b/src/theory/strings/type_enumerator.h
index cfc3fe0..3ca6911 100644
--- a/src/theory/strings/type_enumerator.h
+++ b/src/theory/strings/type_enumerator.h
@@ -42,3 +42,3 @@ public:
 
-  StringEnumerator(TypeNode type) throw(AssertionException) :
+  StringEnumerator(TypeNode type) :
     TypeEnumeratorBase<StringEnumerator>(type) {
diff --git a/src/theory/theory_engine.h b/src/theory/theory_engine.h
index e6684d5..68eedae 100644
--- a/src/theory/theory_engine.h
+++ b/src/theory/theory_engine.h
@@ -283,3 +283,3 @@ class TheoryEngine {
 
-    void conflict(TNode conflictNode) throw(AssertionException) {
+    void conflict(TNode conflictNode) {
       Trace("theory::conflict") << "EngineOutputChannel<" << d_theory << ">::conflict(" << conflictNode << ")" << std::endl;
@@ -290,3 +290,3 @@ class TheoryEngine {
 
-    bool propagate(TNode literal) throw(AssertionException) {
+    bool propagate(TNode literal) {
       Trace("theory::propagate") << "EngineOutputChannel<" << d_theory << ">::propagate(" << literal << ")" << std::endl;
@@ -336,3 +336,3 @@ class TheoryEngine {
 
-    void setIncomplete() throw(AssertionException) {
+    void setIncomplete() {
       Trace("theory") << "TheoryEngine::setIncomplete()" << std::endl;
diff --git a/src/theory/theory_test_utils.h b/src/theory/theory_test_utils.h
index 6d1275c..af69d21 100644
--- a/src/theory/theory_test_utils.h
+++ b/src/theory/theory_test_utils.h
@@ -74,3 +74,3 @@ public:
   void conflict(TNode n)
-    throw(AssertionException) {
+    {
     push(CONFLICT, n);
@@ -79,3 +79,3 @@ public:
   bool propagate(TNode n)
-    throw(AssertionException) {
+    {
     push(PROPAGATE, n);
@@ -85,3 +85,3 @@ public:
   void propagateAsDecision(TNode n)
-    throw(AssertionException) {
+    {
     push(PROPAGATE_AS_DECISION, n);
@@ -89,3 +89,3 @@ public:
 
-  LemmaStatus lemma(TNode n, bool removable, bool preprocess) throw(AssertionException) {
+  LemmaStatus lemma(TNode n, bool removable, bool preprocess) {
     push(LEMMA, n);
@@ -101,3 +101,3 @@ public:
 
-  void setIncomplete() throw(AssertionException) {}
+  void setIncomplete() {}
 
diff --git a/src/theory/type_enumerator.h b/src/theory/type_enumerator.h
index f0a76ee..86d5910 100644
--- a/src/theory/type_enumerator.h
+++ b/src/theory/type_enumerator.h
@@ -80,3 +80,3 @@ class TypeEnumerator {
   static TypeEnumeratorInterface* mkTypeEnumerator(TypeNode type)
-    throw(AssertionException);
+   ;
 
diff --git a/src/theory/type_enumerator_template.cpp b/src/theory/type_enumerator_template.cpp
index ca2413f..619ef0e 100644
--- a/src/theory/type_enumerator_template.cpp
+++ b/src/theory/type_enumerator_template.cpp
@@ -31,3 +31,3 @@ namespace theory {
 
-TypeEnumeratorInterface* TypeEnumerator::mkTypeEnumerator(TypeNode type) throw(AssertionException) {
+TypeEnumeratorInterface* TypeEnumerator::mkTypeEnumerator(TypeNode type) {
   switch(type.getKind()) {
diff --git a/src/theory/uf/equality_engine.cpp b/src/theory/uf/equality_engine.cpp
index 441d843..882f92d 100644
--- a/src/theory/uf/equality_engine.cpp
+++ b/src/theory/uf/equality_engine.cpp
@@ -76,3 +76,3 @@ void EqualityEngine::init() {
 
-EqualityEngine::~EqualityEngine() throw(AssertionException) {
+EqualityEngine::~EqualityEngine() {
   free(d_triggerDatabase);
diff --git a/src/theory/uf/equality_engine.h b/src/theory/uf/equality_engine.h
index bf7c765..b76115a 100644
--- a/src/theory/uf/equality_engine.h
+++ b/src/theory/uf/equality_engine.h
@@ -177,3 +177,3 @@ public:
    */
-  virtual ~EqualityEngine() throw(AssertionException);
+  virtual ~EqualityEngine();
 
diff --git a/src/util/boolean_simplification.cpp b/src/util/boolean_simplification.cpp
index 62ef463..67b229b 100644
--- a/src/util/boolean_simplification.cpp
+++ b/src/util/boolean_simplification.cpp
@@ -23,3 +23,3 @@ BooleanSimplification::push_back_associative_commute_recursive
     (Node n, std::vector<Node>& buffer, Kind k, Kind notK, bool negateNode)
-    throw(AssertionException) {
+    {
   Node::iterator i = n.begin(), end = n.end();
diff --git a/src/util/boolean_simplification.h b/src/util/boolean_simplification.h
index d0ca364..0ec5065 100644
--- a/src/util/boolean_simplification.h
+++ b/src/util/boolean_simplification.h
@@ -42,3 +42,3 @@ class BooleanSimplification {
     (Node n, std::vector<Node>& buffer, Kind k, Kind notK, bool negateNode)
-    throw(AssertionException) CVC4_WARN_UNUSED_RESULT;
+    CVC4_WARN_UNUSED_RESULT;
 
@@ -57,3 +57,3 @@ public:
   static void removeDuplicates(std::vector<Node>& buffer)
-      throw(AssertionException) {
+      {
     if(buffer.size() < DUPLICATE_REMOVAL_THRESHOLD) {
@@ -72,3 +72,3 @@ public:
    */
-  static Node simplifyConflict(Node andNode) throw(AssertionException) {
+  static Node simplifyConflict(Node andNode) {
     AssertArgument(!andNode.isNull(), andNode);
@@ -96,3 +96,3 @@ public:
    */
-  static Node simplifyClause(Node orNode) throw(AssertionException) {
+  static Node simplifyClause(Node orNode) {
     AssertArgument(!orNode.isNull(), orNode);
@@ -122,3 +122,3 @@ public:
    */
-  static Node simplifyHornClause(Node implication) throw(AssertionException) {
+  static Node simplifyHornClause(Node implication) {
     AssertArgument(implication.getKind() == kind::IMPLIES, implication);
@@ -156,3 +156,3 @@ public:
                                 Kind k, Kind notK, bool negateChildren = false)
-      throw(AssertionException) {
+      {
     AssertArgument(buffer.empty(), buffer);
@@ -179,3 +179,3 @@ public:
    */
-  static Node negate(TNode n) throw(AssertionException) {
+  static Node negate(TNode n) {
     AssertArgument(!n.isNull(), n);
@@ -204,3 +204,3 @@ public:
    */
-  static Expr negate(Expr e) throw(AssertionException) {
+  static Expr negate(Expr e) {
     ExprManagerScope ems(e);
@@ -213,3 +213,3 @@ public:
    */
-  inline static Node simplify(TNode n) throw(AssertionException) {
+  inline static Node simplify(TNode n) {
     switch(n.getKind()) {
diff --git a/src/util/cache.h b/src/util/cache.h
index 5183c43..6ac421e 100644
--- a/src/util/cache.h
+++ b/src/util/cache.h
@@ -58,3 +58,3 @@ public:
   public:
-    Scope(Cache<T, U, Hasher>& cache, const T& elt) throw(AssertionException) :
+    Scope(Cache<T, U, Hasher>& cache, const T& elt) :
       d_cache(cache),
@@ -73,3 +73,3 @@ public:
 
-    const U& get() throw(AssertionException) {
+    const U& get() {
       Assert(d_fired, "nothing in cache");
@@ -78,3 +78,3 @@ public:
 
-    U& operator()(U& computed) throw(AssertionException) {
+    U& operator()(U& computed) {
       Assert(!d_fired, "can only cache a computation once");
@@ -83,3 +83,3 @@ public:
     }
-    const U& operator()(const U& computed) throw(AssertionException) {
+    const U& operator()(const U& computed) {
       Assert(!d_fired, "can only cache a computation once");
