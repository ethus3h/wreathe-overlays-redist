diff --git a/Control/Concurrent/MVar/Strict.hs b/Control/Concurrent/MVar/Strict.hs
index 39a8d5c..a5a4759 100644
--- a/Control/Concurrent/MVar/Strict.hs
+++ b/Control/Concurrent/MVar/Strict.hs
@@ -43,7 +43,7 @@ import GHC.Exts
 import GHC.IOBase
 
 import Prelude
-import Control.OldException as Exception
+import Control.Exception
 -- import Control.Parallel.Strategies
 import Control.DeepSeq
 
@@ -61,6 +61,10 @@ import Control.DeepSeq
 --     woken up in FIFO order.  This is useful for providing
 --     fairness properties of abstractions built using 'MVar's.
 --
+
+catchIOError :: IO a -> (IOError -> IO a) -> IO a
+catchIOError = catch
+
 putMVar  :: NFData a => MVar a -> a -> IO ()
 #ifndef __HADDOCK__
 putMVar (MVar mvar#) !x = rnf x `seq` IO $ \ s# -> -- strict!
@@ -121,7 +125,7 @@ swapMVar mvar new = block $ do
 withMVar :: NFData a => MVar a -> (a -> IO b) -> IO b
 withMVar m io = block $ do
     a <- takeMVar m
-    b <- Exception.catch (unblock (io a))
+    b <- catchIOError (unblock (io a))
             (\e -> do putMVar m a; throw e)
     putMVar m a
     return b
@@ -135,7 +139,7 @@ withMVar m io = block $ do
 modifyMVar_ :: NFData a => MVar a -> (a -> IO a) -> IO ()
 modifyMVar_ m io = block $ do
     a  <- takeMVar m
-    a' <- Exception.catch (unblock (io a))
+    a' <- catchIOError (unblock (io a))
             (\e -> do putMVar m a; throw e)
     putMVar m a'
 
@@ -147,7 +151,7 @@ modifyMVar_ m io = block $ do
 modifyMVar :: NFData a => MVar a -> (a -> IO (a,b)) -> IO b
 modifyMVar m io = block $ do
     a      <- takeMVar m
-    (a',b) <- Exception.catch (unblock (io a))
+    (a',b) <- catchIOError (unblock (io a))
                 (\e -> do putMVar m a; throw e)
     putMVar m a'
     return b
