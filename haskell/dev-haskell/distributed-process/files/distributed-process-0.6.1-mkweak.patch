From ad11235d7e6e55f5d67d9114414379a8b7afd006 Mon Sep 17 00:00:00 2001
From: Ben Gamari <ben@smart-cactus.org>
Date: Tue, 29 Mar 2016 16:50:06 +0200
Subject: [PATCH] Adapt to mkWeak# changes in GHC 8.0

mkWeak# now expects a raw state transformer instead of a boxed IO
action.
---
 src/Control/Distributed/Process/Internal/CQueue.hs     |  7 ++++++-
 src/Control/Distributed/Process/Internal/StrictMVar.hs | 10 +++++++---
 src/Control/Distributed/Process/Internal/WeakTQueue.hs |  7 ++++++-
 3 files changed, 19 insertions(+), 5 deletions(-)

diff --git a/src/Control/Distributed/Process/Internal/CQueue.hs b/src/Control/Distributed/Process/Internal/CQueue.hs
index c8f01cb..2c0f333 100644
--- a/src/Control/Distributed/Process/Internal/CQueue.hs
+++ b/src/Control/Distributed/Process/Internal/CQueue.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 {-# LANGUAGE DeriveFunctor #-}
 {-# LANGUAGE BangPatterns  #-}
 {-# LANGUAGE MagicHash, UnboxedTuples, PatternGuards, ScopedTypeVariables, RankNTypes #-}
@@ -46,7 +47,7 @@ import Control.Distributed.Process.Internal.StrictList
 import Data.Maybe (fromJust)
 import Data.Traversable (traverse)
 import GHC.MVar (MVar(MVar))
-import GHC.IO (IO(IO))
+import GHC.IO (IO(IO), unIO)
 import GHC.Prim (mkWeak#)
 import GHC.Weak (Weak(Weak))
 
@@ -265,7 +266,11 @@ dequeue (CQueue arrived incoming size) blockSpec matchons = mask_ $ decrementJus
 -- | Weak reference to a CQueue
 mkWeakCQueue :: CQueue a -> IO () -> IO (Weak (CQueue a))
 mkWeakCQueue m@(CQueue (StrictMVar (MVar m#)) _ _) f = IO $ \s ->
+#if MIN_VERSION_ghc_prim(0,5,0)
+  case mkWeak# m# m (unIO f) s of (# s1, w #) -> (# s1, Weak w #)
+#else
   case mkWeak# m# m f s of (# s1, w #) -> (# s1, Weak w #)
+#endif
 
 queueSize :: CQueue a -> IO Int
 queueSize (CQueue _ _ size) = readTVarIO size
diff --git a/src/Control/Distributed/Process/Internal/StrictMVar.hs b/src/Control/Distributed/Process/Internal/StrictMVar.hs
index 2a2f241..7199f93 100644
--- a/src/Control/Distributed/Process/Internal/StrictMVar.hs
+++ b/src/Control/Distributed/Process/Internal/StrictMVar.hs
@@ -36,7 +36,7 @@ import qualified Control.Concurrent.MVar as MVar
 #endif
   )
 import GHC.MVar (MVar(MVar))
-import GHC.IO (IO(IO))
+import GHC.IO (IO(IO), unIO)
 import GHC.Prim (mkWeak#)
 import GHC.Weak (Weak(Weak))
 
@@ -85,5 +85,9 @@ modifyMVarMasked (StrictMVar v) f =
     evaluateFst (x, y) = evaluate x >> return (x, y)
 
 mkWeakMVar :: StrictMVar a -> IO () -> IO (Weak (StrictMVar a))
-mkWeakMVar m@(StrictMVar (MVar m#)) f = IO $ \s ->
-  case mkWeak# m# m f s of (# s1, w #) -> (# s1, Weak w #)
+mkWeakMVar q@(StrictMVar (MVar m#)) f = IO $ \s ->
+#if MIN_VERSION_ghc_prim(0,5,0)
+  case mkWeak# m# q (unIO f) s of (# s', w #) -> (# s', Weak w #)
+#else
+  case mkWeak# m# q f s of (# s', w #) -> (# s', Weak w #)
+#endif
diff --git a/src/Control/Distributed/Process/Internal/WeakTQueue.hs b/src/Control/Distributed/Process/Internal/WeakTQueue.hs
index f80a8e1..743fefb 100644
--- a/src/Control/Distributed/Process/Internal/WeakTQueue.hs
+++ b/src/Control/Distributed/Process/Internal/WeakTQueue.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP  #-}
 {-# LANGUAGE DeriveDataTypeable  #-}
 {-# LANGUAGE MagicHash, UnboxedTuples #-}
 -- | Clone of Control.Concurrent.STM.TQueue with support for mkWeakTQueue
@@ -22,7 +23,7 @@ module Control.Distributed.Process.Internal.WeakTQueue (
 import Prelude hiding (read)
 import GHC.Conc
 import Data.Typeable (Typeable)
-import GHC.IO (IO(IO))
+import GHC.IO (IO(IO), unIO)
 import GHC.Prim (mkWeak#)
 import GHC.Weak (Weak(Weak))
 
@@ -99,4 +100,8 @@ isEmptyTQueue (TQueue read write) = do
 
 mkWeakTQueue :: TQueue a -> IO () -> IO (Weak (TQueue a))
 mkWeakTQueue q@(TQueue _read (TVar write#)) f = IO $ \s ->
+#if MIN_VERSION_ghc_prim(0,5,0)
+  case mkWeak# write# q (unIO f) s of (# s', w #) -> (# s', Weak w #)
+#else
   case mkWeak# write# q f s of (# s', w #) -> (# s', Weak w #)
+#endif
