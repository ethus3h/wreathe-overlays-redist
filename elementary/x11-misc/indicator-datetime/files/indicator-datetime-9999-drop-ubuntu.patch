=== modified file 'CMakeLists.txt'
--- CMakeLists.txt	2016-05-14 02:07:10 +0000
+++ CMakeLists.txt	2016-08-05 20:12:06 +0000
@@ -46,12 +46,9 @@
                    libedataserver-1.2>=3.5
                    gstreamer-1.0>=1.2
                    libnotify>=0.7.6
-                   url-dispatcher-1>=1
                    properties-cpp>=0.0.1
                    libaccounts-glib>=1.18
-                   messaging-menu>=12.10
-                   uuid>=2.25
-                   ubuntu-app-launch-2)
+                   uuid>=2.25)
 include_directories (SYSTEM ${SERVICE_DEPS_INCLUDE_DIRS})
 
 ##

=== modified file 'data/CMakeLists.txt'
--- data/CMakeLists.txt	2016-05-14 02:07:10 +0000
+++ data/CMakeLists.txt	2016-08-05 19:51:00 +0000
@@ -17,26 +17,6 @@
 add_schema (${SCHEMA_FILE})
 
 ##
-##  Upstart Job File
-##
-
-# where to install
-set (UPSTART_JOB_DIR "${CMAKE_INSTALL_FULL_DATADIR}/upstart/sessions")
-message (STATUS "${UPSTART_JOB_DIR} is the Upstart Job File install dir")
-
-set (UPSTART_JOB_NAME "${CMAKE_PROJECT_NAME}.conf")
-set (UPSTART_JOB_FILE "${CMAKE_CURRENT_BINARY_DIR}/${UPSTART_JOB_NAME}")
-set (UPSTART_JOB_FILE_IN "${CMAKE_CURRENT_SOURCE_DIR}/${UPSTART_JOB_NAME}.in")
-
-# build it
-set (pkglibexecdir "${CMAKE_INSTALL_FULL_PKGLIBEXECDIR}")
-configure_file ("${UPSTART_JOB_FILE_IN}" "${UPSTART_JOB_FILE}")
-
-# install it
-install (FILES "${UPSTART_JOB_FILE}"
-         DESTINATION "${UPSTART_JOB_DIR}")
-
-##
 ##  XDG Autostart File
 ##
 
@@ -57,27 +37,6 @@
          DESTINATION "${XDG_AUTOSTART_DIR}")
 
 ##
-##  Upstart XDG Autostart Override
-##
-
-# where to install
-set (UPSTART_XDG_AUTOSTART_DIR "${CMAKE_INSTALL_FULL_DATAROOTDIR}/upstart/xdg/autostart")
-message (STATUS "${UPSTART_XDG_AUTOSTART_DIR} is the Upstart XDG autostart override dir")
-
-set (UPSTART_XDG_AUTOSTART_NAME "${CMAKE_PROJECT_NAME}.upstart.desktop")
-set (UPSTART_XDG_AUTOSTART_FILE "${CMAKE_CURRENT_BINARY_DIR}/${UPSTART_XDG_AUTOSTART_NAME}")
-set (UPSTART_XDG_AUTOSTART_FILE_IN "${CMAKE_CURRENT_SOURCE_DIR}/${UPSTART_XDG_AUTOSTART_NAME}.in")
-
-# build it
-set (pkglibexecdir "${CMAKE_INSTALL_FULL_PKGLIBEXECDIR}")
-configure_file ("${UPSTART_XDG_AUTOSTART_FILE_IN}" "${UPSTART_XDG_AUTOSTART_FILE}")
-
-# install it
-install (FILES "${UPSTART_XDG_AUTOSTART_FILE}"
-         DESTINATION "${UPSTART_XDG_AUTOSTART_DIR}"
-         RENAME "${XDG_AUTOSTART_NAME}")
-
-##
 ##  Unity Indicator File
 ##
 

=== modified file 'include/datetime/settings-live.h'
--- include/datetime/settings-live.h	2016-07-04 19:30:18 +0000
+++ include/datetime/settings-live.h	2016-08-05 20:42:01 +0000
@@ -39,11 +39,7 @@
 
 private:
     static void on_changed_ccid(GSettings*, gchar*, gpointer);
-    static void on_changed_cal_notification(GSettings*, gchar*, gpointer);
-    static void on_changed_general_notification(GSettings*, gchar*, gpointer);
     void update_key_ccid(const std::string& key);
-    void update_key_cal_notification(const std::string& key);
-    void update_key_general_notification(const std::string& key);
 
     void update_custom_time_format();
     void update_locations();
@@ -73,8 +69,6 @@
     void update_vibrate_silent_mode();
 
     GSettings* m_settings;
-    GSettings* m_settings_cal_notification;
-    GSettings* m_settings_general_notification;
 
     // we've got a raw pointer here, so disable copying
     LiveSettings(const LiveSettings&) =delete;

=== modified file 'src/actions-live.cpp'
--- src/actions-live.cpp	2016-05-14 02:07:10 +0000
+++ src/actions-live.cpp	2016-08-05 19:54:07 +0000
@@ -20,8 +20,6 @@
 #include <datetime/dbus-shared.h>
 #include <datetime/actions-live.h>
 
-#include <url-dispatcher.h>
-
 #include <glib.h>
 
 #include <sstream>
@@ -55,7 +53,6 @@
 void LiveActions::dispatch_url(const std::string& url)
 {
     g_debug("Dispatching url '%s'", url.c_str());
-    url_dispatch_send(url.c_str(), nullptr, nullptr);
 }
 
 /***
@@ -95,7 +92,6 @@
 {
     switch(get_desktop()) {
         case LiveActions::UNITY8:
-            dispatch_url("appid://com.ubuntu.clock/clock/current-user-version");
             break;
         case LiveActions::UNITY7:
         default:
@@ -122,7 +118,6 @@
         {
             const auto utc = dt.to_timezone("UTC");
             auto cmd = utc.format("calendar://startdate=%Y-%m-%dT%H:%M:%S+00:00");
-            dispatch_url(cmd);
             break;
         }
         case LiveActions::UNITY7:
@@ -139,7 +134,6 @@
 {
     switch(get_desktop()) {
     case LiveActions::UNITY8:
-        dispatch_url("settings:///system/time-date");
         break;
     case LiveActions::UNITY7:
         execute_command("unity-control-center datetime");
@@ -186,7 +180,6 @@
 {
     if (!appt.activation_url.empty())
     {
-        dispatch_url(appt.activation_url);
     }
     else switch (appt.type)
     {

=== modified file 'src/notifications.cpp'
--- src/notifications.cpp	2016-06-30 00:37:56 +0000
+++ src/notifications.cpp	2016-08-05 20:24:30 +0000
@@ -21,11 +21,6 @@
 
 #include <libnotify/notify.h>
 
-#include <messaging-menu/messaging-menu-app.h>
-#include <messaging-menu/messaging-menu-message.h>
-
-#include <libubuntu-app-launch-2/ubuntu-app-launch/appid.h>
-
 #include <uuid/uuid.h>
 
 #include <gio/gdesktopappinfo.h>
@@ -166,13 +161,6 @@
     {
         if (!notify_init(app_name.c_str()))
             g_critical("Unable to initialize libnotify!");
-
-        // messaging menu
-        auto app_id = calendar_app_id();
-        if (!app_id.empty()) {
-            m_messaging_app.reset(messaging_menu_app_new(app_id.c_str()), g_object_unref);
-            messaging_menu_app_register(m_messaging_app.get());
-        }
     }
 
     ~Impl()
@@ -181,8 +169,6 @@
         remove_all ();
 
         notify_uninit ();
-        if (m_messaging_app)
-            messaging_menu_app_unregister (m_messaging_app.get());
     }
 
     const std::string& app_name() const
@@ -305,68 +291,16 @@
             return "";
         }
 
-        if (!m_messaging_app) {
-            return std::string();
-        }
-        uuid_t message_uuid;
-        uuid_generate(message_uuid);
-
-        char uuid_buf[37];
-        uuid_unparse(message_uuid, uuid_buf);
-        const std::string message_id(uuid_buf);
-
-        // use full icon path name, "calendar-app" does not work with themed icons
-        auto icon_file = g_file_new_for_path(calendar_app_icon().c_str());
-        // messaging_menu_message_new: will take control of icon object
-        GIcon *icon = g_file_icon_new(icon_file);
-        g_object_unref(icon_file);
-
-        // check if source exists
-        if (!messaging_menu_app_has_source(m_messaging_app.get(), m_app_name.c_str()))
-            messaging_menu_app_append_source(m_messaging_app.get(), m_app_name.c_str(), nullptr, "Calendar");
-
-        auto msg = messaging_menu_message_new(message_id.c_str(),
-                                              icon,
-                                              data.m_title.c_str(),
-                                              nullptr,
-                                              data.m_body.c_str(),
-                                              data.m_start_time * G_USEC_PER_SEC); // secs -> microsecs
-        if (msg)
-        {
-            std::shared_ptr<messaging_menu_data> msg_data(new messaging_menu_data{message_id, data.m_timeout_callback, this});
-            m_messaging_messages[message_id] = msg_data;
-            g_signal_connect(G_OBJECT(msg), "activate",
-                             G_CALLBACK(on_message_activated), msg_data.get());
-            messaging_menu_app_append_message(m_messaging_app.get(), msg, m_app_name.c_str(), false);
-
-            // we use that to keep track of messaging, in case of message get cleared from menu
-            g_object_set_data_full(G_OBJECT(msg), "destroy-notify", msg_data.get(), on_message_destroyed);
-            // keep the message control with message_menu
-            g_object_unref(msg);
-
-            return message_id;
-        } else {
-            g_warning("Fail to create messaging menu message");
-        }
-        return "";
+        return std::string();
     }
 
     void remove (const std::string &key)
     {
-        auto it = m_messaging_messages.find(key);
-        if (it != m_messaging_messages.end())
-        {
-            // tell the server to remove message
-            messaging_menu_app_remove_message_by_id(m_messaging_app.get(), it->second->msg_id.c_str());
-            // message will be remove by on_message_destroyed cb.
-        }
+    	(void) key;
     }
 
     void remove_all ()
     {
-        // call remove() on all our keys
-        while (!m_messaging_messages.empty())
-            remove(m_messaging_messages.begin()->first);
     }
 
 private:
@@ -410,28 +344,6 @@
         static_cast<Impl*>(gself)->remove_closed_notification(GPOINTER_TO_INT(gkey));
     }
 
-    static void on_message_activated (MessagingMenuMessage *,
-                                      const char *,
-                                      GVariant *,
-                                      gpointer data)
-    {
-        auto msg_data =  static_cast<messaging_menu_data*>(data);
-        auto it = msg_data->self->m_messaging_messages.find(msg_data->msg_id);
-        g_return_if_fail (it != msg_data->self->m_messaging_messages.end());
-        const auto& ndata = it->second;
-
-        if (ndata->callback)
-            ndata->callback();
-    }
-
-    static void on_message_destroyed(gpointer data)
-    {
-        auto msg_data = static_cast<messaging_menu_data*>(data);
-        auto it = msg_data->self->m_messaging_messages.find(msg_data->msg_id);
-        if (it != msg_data->self->m_messaging_messages.end())
-            msg_data->self->m_messaging_messages.erase(it);
-    }
-
     void remove_closed_notification (int key)
     {
         auto it = m_notifications.find(key);
@@ -460,11 +372,6 @@
 
     static std::string calendar_app_id()
     {
-        auto app_id = ubuntu::app_launch::AppID::discover("com.ubuntu.calendar");
-        if (!app_id.empty())
-            // Due the use of old API by messaging_menu we need append a extra ".desktop" to the app_id.
-            return std::string(app_id) + ".desktop";
-        else
             return std::string();
     }
 
@@ -488,10 +395,6 @@
     ****
     ***/
 
-    // messaging menu
-    std::shared_ptr<MessagingMenuApp> m_messaging_app;
-    std::map<std::string, std::shared_ptr<messaging_menu_data> > m_messaging_messages;
-
     const std::string m_app_name;
 
     // key-to-data

=== modified file 'src/settings-live.cpp'
--- src/settings-live.cpp	2016-07-04 19:30:18 +0000
+++ src/settings-live.cpp	2016-08-05 20:45:18 +0000
@@ -29,20 +29,14 @@
 
 LiveSettings::~LiveSettings()
 {
-    g_clear_object(&m_settings_general_notification);
-    g_clear_object(&m_settings_cal_notification);
     g_clear_object(&m_settings);
 }
 
 LiveSettings::LiveSettings():
-    m_settings(g_settings_new(SETTINGS_INTERFACE)),
-    m_settings_cal_notification(g_settings_new_with_path(SETTINGS_NOTIFY_SCHEMA_ID, SETTINGS_NOTIFY_CALENDAR_PATH)),
-    m_settings_general_notification(g_settings_new(SETTINGS_NOTIFY_APPS_SCHEMA_ID))
+    m_settings(g_settings_new(SETTINGS_INTERFACE))
 {
 
     g_signal_connect (m_settings,                      "changed", G_CALLBACK(on_changed_ccid), this);
-    g_signal_connect (m_settings_cal_notification,     "changed", G_CALLBACK(on_changed_cal_notification), this);
-    g_signal_connect (m_settings_general_notification, "changed", G_CALLBACK(on_changed_general_notification), this);
 
     // init the Properties from the GSettings backend
     update_custom_time_format();
@@ -65,12 +59,6 @@
     update_alarm_duration();
     update_alarm_haptic();
     update_snooze_duration();
-    update_cal_notification_enabled();
-    update_cal_notification_sounds();
-    update_cal_notification_vibrations();
-    update_cal_notification_bubbles();
-    update_cal_notification_list();
-    update_vibrate_silent_mode();
 
     // now listen for clients to change the properties s.t. we can sync update GSettings
 
@@ -158,30 +146,6 @@
     snooze_duration.changed().connect([this](unsigned int value){
         g_settings_set_uint(m_settings, SETTINGS_SNOOZE_DURATION_S, value);
     });
-
-    cal_notification_enabled.changed().connect([this](bool value){
-        g_settings_set_boolean(m_settings_cal_notification, SETTINGS_NOTIFY_ENABLED_KEY, value);
-    });
-
-    cal_notification_sounds.changed().connect([this](bool value){
-        g_settings_set_boolean(m_settings_cal_notification, SETTINGS_NOTIFY_SOUNDS_KEY, value);
-    });
-
-    cal_notification_vibrations.changed().connect([this](bool value){
-        g_settings_set_boolean(m_settings_cal_notification, SETTINGS_NOTIFY_VIBRATIONS_KEY, value);
-    });
-
-    cal_notification_bubbles.changed().connect([this](bool value){
-        g_settings_set_boolean(m_settings_cal_notification, SETTINGS_NOTIFY_BUBBLES_KEY, value);
-    });
-
-    cal_notification_list.changed().connect([this](bool value){
-        g_settings_set_boolean(m_settings_cal_notification, SETTINGS_NOTIFY_LIST_KEY, value);
-    });
-
-    vibrate_silent_mode.changed().connect([this](bool value){
-        g_settings_set_boolean(m_settings_general_notification, SETTINGS_VIBRATE_SILENT_KEY, value);
-    });
 }
 
 /***
@@ -308,79 +272,6 @@
     snooze_duration.set(g_settings_get_uint(m_settings, SETTINGS_SNOOZE_DURATION_S));
 }
 
-void LiveSettings::update_cal_notification_enabled()
-{
-    cal_notification_enabled.set(g_settings_get_boolean(m_settings_cal_notification, SETTINGS_NOTIFY_ENABLED_KEY));
-}
-
-void LiveSettings::update_cal_notification_sounds()
-{
-    cal_notification_sounds.set(g_settings_get_boolean(m_settings_cal_notification, SETTINGS_NOTIFY_SOUNDS_KEY));
-}
-
-void LiveSettings::update_cal_notification_vibrations()
-{
-    cal_notification_vibrations.set(g_settings_get_boolean(m_settings_cal_notification, SETTINGS_NOTIFY_VIBRATIONS_KEY));
-}
-
-void LiveSettings::update_cal_notification_bubbles()
-{
-    cal_notification_bubbles.set(g_settings_get_boolean(m_settings_cal_notification, SETTINGS_NOTIFY_BUBBLES_KEY));
-}
-
-void LiveSettings::update_cal_notification_list()
-{
-    cal_notification_list.set(g_settings_get_boolean(m_settings_cal_notification, SETTINGS_NOTIFY_LIST_KEY));
-}
-
-void LiveSettings::update_vibrate_silent_mode()
-{
-    vibrate_silent_mode.set(g_settings_get_boolean(m_settings_general_notification, SETTINGS_VIBRATE_SILENT_KEY));
-}
-
-/***
-****
-***/
-
-void LiveSettings::on_changed_cal_notification(GSettings* /*settings*/,
-                                               gchar*     key,
-                                               gpointer   gself)
-{
-    static_cast<LiveSettings*>(gself)->update_key_cal_notification(key);
-}
-
-
-void LiveSettings::update_key_cal_notification(const std::string& key)
-{
-    if (key == SETTINGS_NOTIFY_ENABLED_KEY)
-        update_cal_notification_enabled();
-    else if (key == SETTINGS_NOTIFY_SOUNDS_KEY)
-        update_cal_notification_sounds();
-    else if (key == SETTINGS_NOTIFY_VIBRATIONS_KEY)
-        update_cal_notification_vibrations();
-    else if (key == SETTINGS_NOTIFY_BUBBLES_KEY)
-        update_cal_notification_bubbles();
-    else if (key == SETTINGS_NOTIFY_LIST_KEY)
-        update_cal_notification_list();
-}
-
-/***
-****
-***/
-
-void LiveSettings::on_changed_general_notification(GSettings* /*settings*/,
-                                                   gchar*     key,
-                                                   gpointer   gself)
-{
-    static_cast<LiveSettings*>(gself)->update_key_general_notification(key);
-}
-
-void LiveSettings::update_key_general_notification(const std::string& key)
-{
-    if (key == SETTINGS_VIBRATE_SILENT_KEY)
-        update_vibrate_silent_mode();
-}
-
 /***
 ****
 ***/

